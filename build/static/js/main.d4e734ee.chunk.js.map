{"version":3,"sources":["services/UserMediaService.js","services/FileService.js","components/AudioSourceList.js","components/VideoSourceList.js","components/AudioVisualization.js","components/TimeCounter.js","components/SaveFilepath.js","App.js","serviceWorker.js","index.js","services/RecorderService.js"],"names":["UserMediaService","getVideo","_getVideo","Object","asyncToGenerator","regenerator_default","a","mark","_callee","source","wrap","_context","prev","next","abrupt","navigator","mediaDevices","getUserMedia","audio","video","mandatory","chromeMediaSource","chromeMediaSourceId","id","minWidth","maxWidth","minHeight","maxHeight","then","handleStream","catch","handleUserMediaError","stop","_x","apply","this","arguments","getAudio","_getAudio","_callee2","_args2","_context2","length","undefined","deviceId","_handleStream","_callee3","stream","_context3","_x2","_handleUserMediaError","_callee4","error","_context4","Error","_x3","fs","require","window","FileService","save","buffer","path","name","Promise","resolve","reject","filename","concat","writeFile","err","console","log","AudioSourceList","state","audioSources","selectedSource","_handleChange","event","_this","find","item","target","value","selectSource","setState","localStorage","setItem","props","onSelect","getSources","enumerateDevices","sources","filter","kind","_this2","_loadFromStorage","sourceId","getItem","react_default","createElement","onChange","className","map","key","label","Component","defaultProps","desktopCapturer","VideoSourceList","screenSources","windowSources","_this$state","toConsumableArray","types","includes","_this$state2","AudioVisualization","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","canvas","React","createRef","canDraw","audioDevice","start","canvasCtx","current","getContext","startAudio","startCanvas","draw","clearCanvas","audioStream","audioCtx","AudioContext","webkitAudioContext","analyser","createAnalyser","createMediaStreamSource","connect","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","width","height","clearRect","requestAnimationFrame","bind","getByteFrequencyData","barHeight","barWidth","x","i","fillStyle","fillRect","ref","TimeCounter","totalSeconds","timer","setInterval","increment","clearInterval","_ref","number","slice","hours","Math","floor","minutes","seconds","_this$getTime","getTime","numberFormat","remote","SaveFilepath","folder","hasTime","format","selectFolder","dialog","showOpenDialog","properties","handleChange","type","checked","defineProperty","formatList","onClick","placeholder","readOnly","ipcRenderer","App","isRecording","isPaused","canRecordSystemAudio","videoTarget","audioTarget","systemAudioTarget","isLoading","onVideoSourceSelect","srcObject","muted","onloadedmetadata","e","play","videoSourceList","onAudioSourceSelect","_ref2","audioSourceList","onRecordSystemAudioChange","_ref3","currentTarget","sent","savefilepath","audioTracks","showMessageBox","message","getAudioTracks","addTrack","RecorderService","timeCounter","send","pause","_callee5","_context5","resume","_callee6","_this$state3","_context6","_callee7","_context7","reset","saveFile","_ref8","_callee8","fileName","_context8","Date","now","toString","_x4","deleteRecording","_callee9","_context9","cancelRecording","_callee10","options","_context10","buttons","defaultId","title","detail","response","handleShortcuts","on","_this3","_this3$state","_this$state4","Fragment","_this$state5","appClassName","components_AudioVisualization","components_VideoSourceList","components_AudioSourceList","style","display","disabled","components_TimeCounter","isActive","controlButtons","components_SaveFilepath","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister","recorder","blobs","MediaRecorder","ondataavailable","push","data","_stop","_Users_hanashiro_Desktop_memoplay_screen_recorder_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_hanashiro_Desktop_memoplay_screen_recorder_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","onstop","toArrayBuffer","Blob","arrayBuffer","toBuffer","blob","callback","fileReader","FileReader","onload","result","readAsArrayBuffer","Buffer","byteLength","arr"],"mappings":"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","file":"static/js/main.d4e734ee.chunk.js","sourcesContent":["export const UserMediaService = {\n    async getVideo(source){\n        return navigator.mediaDevices.getUserMedia({\n            audio: false,\n            video: { \n              mandatory: {\n                chromeMediaSource: 'desktop',\n                chromeMediaSourceId: source.id,\n                minWidth: 1280,\n                maxWidth: 1920,\n                minHeight: 720,\n                maxHeight: 1080,\n              }\n            }\n          })\n          .then(UserMediaService.handleStream)\n          .catch(UserMediaService.handleUserMediaError)\n    },\n    async getAudio(source = null){\n      let audio = true;\n      if(source){\n        audio = {\n          deviceId: source.deviceId\n        };\n      }\n      return navigator.mediaDevices.getUserMedia({\n          audio,\n          video: false\n        })\n        .then(UserMediaService.handleStream)\n        .catch(UserMediaService.handleUserMediaError)\n    },\n    async handleStream(stream){\n      return stream;\n    },\n    async handleUserMediaError(error){\n      throw Error(error);\n    }\n};\n\n","const require = window.require,\n    fs = require('fs');\n\nexport const FileService = {\n    save(buffer, path, name){\n        return new Promise((resolve, reject) => {\n            const filename = `${path}/${name}`;\n            fs.writeFile(filename, buffer, (err) => {\n                if(err){\n                    reject(err);\n                }else{\n                    resolve(filename);\n                    console.log(filename)\n                }\n            })\n        })\n    }\n};","import React, {Component} from 'react';\n\nclass AudioSourceList extends Component{\n\n    static defaultProps = {\n        onSelect: () => {}\n    }\n\n    state = {\n        audioSources: [],\n        selectedSource: {}\n    }\n\n    componentDidMount(){\n        this.getSources();\n    }\n\n    async getSources(){\n        const sources = await navigator.mediaDevices.enumerateDevices(),\n            audioSources = sources.filter(item => item.kind === 'audioinput');\n        this.setState({\n            audioSources\n        }, () => {\n            this._loadFromStorage();\n        });\n        return audioSources;\n    }\n\n    _handleChange = (event) => {\n        const selectedSource = this.state.audioSources.find(item => item.deviceId === event.target.value);\n        this.selectSource(selectedSource);\n    }\n\n    _loadFromStorage(){\n        const sourceId = localStorage.getItem('_audio_source'),\n            selectedSource = this.state.audioSources.find(item => item.deviceId === sourceId);\n        if(selectedSource){\n            this.selectSource(selectedSource);\n        }else{\n            this.selectSource(this.state.audioSources[0]);\n        }\n    }\n\n    selectSource = (selectedSource) => {\n        if(selectedSource){\n            this.setState({selectedSource});\n            localStorage.setItem('_audio_source', selectedSource.deviceId);\n            this.props.onSelect(selectedSource);\n        }\n    }\n\n    render(){\n        const {state} = this;\n        return (\n            <div>\n                <div>Audio input source</div>\n                <select value={state.selectedSource.deviceId} onChange={this._handleChange} className=\"settings-select\" >\n                    {\n                        state.audioSources.map(item => <option key={item.deviceId} value={item.deviceId} >{item.label}</option>)\n                    }\n                </select>\n                {/*\n                <ul>\n                    {\n                        state.audioSources.map(item => <AudioSourceListItem key={item.deviceId} selectedSource={state.selectedSource} onSelect={this.onSourceSelect} item={item} />)\n                    }\n                </ul>\n                */}\n            </div>\n        )\n    }\n}\n\nfunction AudioSourceListItem(props){\n    const { item, selectedSource } = props,\n        cutIndex = item.label.lastIndexOf('('),\n        label = item.label.substr(0, cutIndex).trim();\n    let classes = '';\n\n    if(selectedSource && item.deviceId === selectedSource.deviceId){\n        classes += 'is-selected';\n    }\n\n    return (\n        <li onClick={() => props.onSelect(item)} className={classes} >\n            <div>{label}</div>\n        </li>\n    );\n}\n\nexport default AudioSourceList;","import React, {Component} from 'react';\n\nconst require = window.require;\nconst { desktopCapturer } = require('electron');\n\nclass VideoSourceList extends Component{\n\n    static defaultProps = {\n        onSelect: () => {}\n    }\n\n    state = {\n        screenSources: [],\n        windowSources: [],\n        selectedSource: {}\n    }\n\n    componentDidMount(){\n        this.getSources();\n    }\n\n    getSources(){\n        desktopCapturer.getSources({ types: ['window', 'screen'] }, (error, sources) => {\n            const windowSources = sources.filter(item => item.id.includes('window')),\n                screenSources = sources.filter(item => item.id.includes('screen'));\n\n            this.setState({\n                windowSources,\n                screenSources\n            }, () => {\n                this._loadFromStorage();\n            });\n        })\n    }\n\n    _handleChange = (event) => {\n        const {screenSources, windowSources} = this.state,\n            selectedSource = [...screenSources, ...windowSources].find(item => item.id === event.target.value);\n        this.selectSource(selectedSource);\n    }\n\n    _loadFromStorage(){\n        const {screenSources, windowSources} = this.state,\n            sourceId = localStorage.getItem('_video_source'),\n            selectedSource = [...screenSources, ...windowSources].find(item => item.id === sourceId);\n        if(selectedSource){\n            this.selectSource(selectedSource);\n        }else{\n            this.selectSource(screenSources[0]);\n        }\n    }\n\n    selectSource = (selectedSource) => {\n        if(selectedSource){\n            this.setState({selectedSource});\n            localStorage.setItem('_video_source', selectedSource.id);\n            this.props.onSelect(selectedSource);\n        }\n    }\n\n    render(){\n        const {state} = this;\n        return (\n            <div>\n                <div>Video input  source</div>\n                <select value={state.selectedSource.id} onChange={(this._handleChange)} className=\"settings-select\" >\n                    <option>-- SCREENS --</option>\n                    {\n                        state.screenSources.map(item => <option key={item.id} value={item.id} >{item.name}</option>)\n                    }\n                    <option>-- WINDOWS --</option>\n                    {\n                        state.windowSources.map(item => <option key={item.id} value={item.id} >{item.name}</option>)\n                    }\n                </select>\n                {/*\n                <ul>\n                    {\n                        state.screenSources.map(item => <VideoSourceListItem key={item.id} selectedSource={state.selectedSource} onSelect={this.onSourceSelect} item={item} />)\n                    }\n                </ul>\n                \n                <hr />\n\n                {!state.selectedSource ? '' : <img src={state.selectedSource.thumbnail.toDataURL()} />}\n                <div>Windows</div>\n                <ul>\n                    {\n                        state.windowSources.map(item => <VideoSourceListItem key={item.id} selectedSource={state.selectedSource} onSelect={this.onSourceSelect} item={item} />)\n                    }\n                </ul>\n                \n                */}\n                \n            </div>\n        )\n    }\n}\n\nfunction VideoSourceListItem(props){\n    const { item, selectedSource } = props;\n    let classes = '';\n\n    if(selectedSource && item.id === selectedSource.id){\n        classes += 'is-selected';\n    }\n    return (\n        <li onClick={() => props.onSelect(item)} className={classes} >\n            <img src={item.thumbnail.toDataURL()} />\n            <div>{item.name}</div>\n        </li>\n    );\n}\n\nexport default VideoSourceList;","import React, { Component } from 'react';\n\nimport { UserMediaService } from './../services/UserMediaService';\n\nclass AudioVisualization extends Component{\n    static defaultProps = {\n        audioDevice: null\n    }\n\n    constructor(props){\n        super(props);\n        this.canvas = React.createRef();\n        this.canDraw = false;\n    }\n\n    async componentDidUpdate(){\n        if(this.props.audioDevice){\n            this.start();\n        }else{\n            this.stop();\n        }\n    }\n\n    async componentDidMount(){\n        this.canvasCtx = this.canvas.current.getContext('2d');\n        if(this.props.audioDevice){\n            this.start();\n        }\n    }\n \n    start(){\n        this.startAudio();\n        this.startCanvas();\n        this.canDraw = true;\n        this.draw();\n    }\n\n    stop(){\n        this.canDraw = false;\n        this.clearCanvas();\n    }\n\n    async startAudio(){\n        if(this.props.audioDevice){\n            this.audioStream = await UserMediaService.getAudio(this.props.audioDevice);\n            const audioCtx = new (window.AudioContext || window.webkitAudioContext)(),\n            analyser = audioCtx.createAnalyser(),\n            source = audioCtx.createMediaStreamSource(this.audioStream);\n        \n            source.connect(analyser);\n\n            analyser.fftSize = 256;\n            this.analyser = analyser;\n            this.bufferLength = analyser.frequencyBinCount;\n            this.dataArray = new Uint8Array(this.bufferLength);\n        }\n    }\n\n    startCanvas(){\n        const canvas = this.canvas.current;\n        canvas.width = this.props.width || 100;\n        canvas.height = this.props.height || 100;\n    }\n\n    \n    clearCanvas(){\n        const canvas = this.canvas.current,\n            {width, height} = canvas;\n        this.canvasCtx.clearRect(0, 0, width, height);\n    }\n\n    draw() {\n        if(this.canDraw){\n            const canvas = this.canvas.current,\n                {width, height} = canvas,\n                {canvasCtx, bufferLength, dataArray, analyser} = this;\n            \n            this.clearCanvas();\n\n            requestAnimationFrame(this.draw.bind(this));\n\n            if(!this.audioStream){\n                return false;\n            }\n\n    \n            analyser.getByteFrequencyData(dataArray);\n    \n            /*canvasCtx.fillStyle = 'rgb(0, 0, 0)';\n            canvasCtx.fillRect(0, 0, width, height);*/\n\n            const barWidth = (width / bufferLength) * 2.5;\n            let barHeight,\n            x = 0;\n\n            for(let i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i]/2;\n        \n                canvasCtx.fillStyle = 'rgb(50, ' + (barHeight + 100) + ',50)';\n                canvasCtx.fillRect(x, height - barHeight / 2, barWidth, barHeight);\n        \n                x += barWidth + 1;\n            }\n            \n\n           /*const barWidth = width;\n           let barHeight;\n\n           for(let i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i]/2;\n\n                var grad1 = canvasCtx.createLinearGradient(0, height * .2, 0, height);\n                grad1.addColorStop(0.2, '#f15a47'); //red\n                grad1.addColorStop(0.5, '#f2ee47'); // yellow\n                grad1.addColorStop(1, '#389f47'); // green\n\n                canvasCtx.fillStyle = grad1;\n       \n                //canvasCtx.fillStyle = 'rgb(50, ' + (barHeight + 100) + ',50)';\n                canvasCtx.fillRect(0, height - barHeight / 2, barWidth, barHeight);\n           }*/\n        }\n\n\n    }\n\n    render(){\n        return (\n            <div>\n                <canvas ref={this.canvas} height={50} width={100} />\n            </div>\n        )\n    }\n}\n\nexport default AudioVisualization;","import React, { Component } from 'react';\n\nclass TimeCounter extends Component{\n    state = {\n        totalSeconds: 0\n    }\n\n    constructor(props){\n        super(props);\n        this.timer = null;\n    }\n\n    start(){\n        this.timer = setInterval(() => this.increment(), 1000);\n    }\n\n    stop(){\n        clearInterval(this.timer);\n    }\n\n    reset(){\n        this.setState({\n            totalSeconds: 0\n        });\n    }\n\n    increment(){\n        this.setState(({totalSeconds}) => ({totalSeconds: totalSeconds + 1}));\n    }\n\n    numberFormat(number){\n        return ('00' + number).slice(-2);\n    }\n\n    getTime(){\n        const {totalSeconds} = this.state;\n\n        const hours = Math.floor(totalSeconds /3600),\n            minutes = Math.floor((totalSeconds - hours*3600)/60),\n            seconds = totalSeconds - (hours*3600 + minutes*60);\n\n        return {seconds, minutes, hours};\n    }\n\n    render(){\n        const {seconds, minutes, hours} = this.getTime();\n        return (\n            <div className=\"time-counter\" >\n                <span>{hours}:{this.numberFormat(minutes)}:{this.numberFormat(seconds)}</span>\n            </div>\n        );\n    }\n}\n\nexport default TimeCounter;","import React, { Component } from 'react';\n\nconst require = window.require;\nconst { remote } = require('electron');\n\nclass SaveFilepath extends Component{\n    state = {\n        folder: '',\n        filename: '',\n        hasTime: false,\n        format: ''\n    }\n\n    constructor(props){\n        super(props);\n        this.formatList = ['mp4', 'avi'];\n    }\n\n    componentDidMount(){\n        const folder = localStorage.getItem('_filepath_folder') || '',\n            format = localStorage.getItem('_filepath_format') || 'webm',\n            hasTime = localStorage.getItem('_filepath_hasTime') === 'true';\n        this.setState({\n            folder,\n            format,\n            hasTime\n        })\n    }\n\n    selectFolder = async () => {\n        const folder = remote.dialog.showOpenDialog({ properties: ['openDirectory'] });\n        if(folder){\n            this.setState({folder: folder[0]});\n            localStorage.setItem(`_filepath_folder`, folder[0]);\n        }\n    }\n\n    handleChange = (event) => {\n        const { target } = event,\n            {name} = target,\n            value = target.type === 'checkbox' ? target.checked : target.value;\n\n        this.setState({\n            [name]: value\n        })\n\n        localStorage.setItem(`_filepath_${name}`, value);\n    }\n\n    render(){\n        const {folder, filename, format, hasTime} = this.state;\n        return(\n            <div className=\"save-file-path\" >\n                <input name=\"folder\" type=\"text\" onClick={this.selectFolder} value={folder} placeholder=\"folder\" readOnly />\n                <input name=\"filename\" type=\"text\" onChange={this.handleChange} value={filename} placeholder=\"file name\" />\n                <select name=\"format\" onChange={this.handleChange} value={format} >\n                    <option value=\"webm\" >webm (default)</option>\n                    {\n                        this.formatList.map(format => <option value={format} >{format}</option>)\n                    }\n                </select>\n                <label>\n                    <input name=\"hasTime\" type=\"checkbox\" onChange={this.handleChange} checked={hasTime} />\n                    Time\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default SaveFilepath;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { UserMediaService } from './services/UserMediaService';\nimport { RecorderService } from './services/RecorderService';\nimport { FileService } from './services/FileService';\n\nimport AudioSourceList from './components/AudioSourceList';\nimport VideoSourceList from './components/VideoSourceList';\nimport AudioVisualization from './components/AudioVisualization';\nimport TimeCounter from './components/TimeCounter';\nimport SaveFilepath from './components/SaveFilepath';\n\nconst require = window.require;\nconst { ipcRenderer, remote } = require('electron');\n// https://zhirzh.github.io/2017/09/02/mediarecorder/\n\nclass App extends Component { \n\n  state = {\n    isRecording: false,\n    isPaused: false,\n    canRecordSystemAudio: false,\n    videoTarget: null,\n    audioTarget: null,\n    systemAudioTarget: null,\n    isLoading: false\n  }\n\n  constructor(props) {\n    super(props);\n    this.video = React.createRef();\n    this.timeCounter = React.createRef();\n    this.savefilepath = React.createRef();\n    this.videoSourceList = React.createRef();\n    this.audioSourceList = React.createRef();\n  }\n\n  componentDidMount(){\n    this.handleShortcuts();\n\n    ipcRenderer.on('back:convert-video:complete', () => {\n      this.setState({isLoading: false});\n    })\n  }\n\n  handleShortcuts(){\n    ipcRenderer.on('play', ()=> {\n      const {isRecording, isPaused} = this.state;\n      if(!isRecording && !isPaused){\n        this.start();\n      }else if(isRecording && !isPaused){\n        this.pause();\n      }else{\n        this.resume();\n      }\n    });\n    ipcRenderer.on('stop', ()=> {\n      this.stop();\n    });\n    ipcRenderer.on('delete', ()=> {\n      this.cancelRecording();\n    });\n  }\n\n  onVideoSourceSelect = async (source) => {\n    this.setState({videoTarget: source});\n    const video = this.video.current;\n\n    UserMediaService.getVideo(source)\n      .then(stream => {\n        console.log(source, stream)\n        video.srcObject = stream;\n        video.muted = true;\n        video.onloadedmetadata = (e) => video.play();\n      })\n      .catch(() => {\n        const videoSourceList = this.videoSourceList.current;\n        videoSourceList.selectSource(videoSourceList.state.screenSources[0]);\n      })\n  }\n\n  onAudioSourceSelect = async (source) => {\n    this.setState({audioTarget: source});\n\n    UserMediaService.getAudio(source)\n      .then(stream => {\n        console.log(source, stream)\n      })\n      .catch(() => {\n        const audioSourceList = this.audioSourceList.current;\n        audioSourceList.selectSource(audioSourceList.state.audioSources[0]);\n      })\n  }\n\n  onRecordSystemAudioChange = async (event) => {\n    const canRecordSystemAudio = event.currentTarget.checked;\n    let systemAudioTarget = false;\n    if(canRecordSystemAudio){\n      systemAudioTarget = await UserMediaService.getAudio();\n    }\n    this.setState({canRecordSystemAudio, systemAudioTarget});\n  }\n\n  start = async () => {\n    const savefilepath = this.savefilepath.current;\n    if(this.state.isLoading){\n      return false;\n    }\n    if(!savefilepath.state.folder){\n      remote.dialog.showMessageBox({\n        message: 'Select a folder to save the file'\n      });\n      this.savefilepath.current.selectFolder();\n      return false;\n    }\n\n    const {videoTarget, audioTarget, isRecording, canRecordSystemAudio, systemAudioTarget} = this.state,\n      stream = this.video.current.srcObject;\n    if(videoTarget && !isRecording){\n      if(audioTarget){\n        const audioStream = await UserMediaService.getAudio(audioTarget),\n          audioTracks = audioStream.getAudioTracks();\n        stream.addTrack(audioTracks[0]);\n      }\n      RecorderService.start(stream);\n      this.setState({isRecording: true, isPaused: false});\n      this.timeCounter.current.start();\n      ipcRenderer.send('win:start');\n    }\n  }\n\n  pause = async () => {\n    const {isRecording, isPaused} = this.state;\n    if(isRecording && !isPaused){\n      RecorderService.pause();\n      this.setState({isRecording: true, isPaused: true});\n      this.timeCounter.current.stop();\n      ipcRenderer.send('win:pause');\n    }\n  }\n\n  resume = async () => {\n    const {isRecording, isPaused} = this.state;\n    if(isRecording && isPaused){\n      RecorderService.resume();\n      this.setState({isRecording: true, isPaused: false});\n      this.timeCounter.current.start();\n      ipcRenderer.send('win:resume');\n    }\n  }\n\n  stop = async () => {\n    const {isRecording} = this.state;\n    if(isRecording){\n      const buffer = await RecorderService.stop();\n      this.setState({isRecording: false, isPaused: false});\n      this.timeCounter.current.stop();\n      this.timeCounter.current.reset();\n      ipcRenderer.send('win:stop');\n      return this.saveFile(buffer);\n    }\n  }\n\n  saveFile = async (buffer) => {\n    const savefilepath = this.savefilepath.current;\n    const folder = `${savefilepath.state.folder || '.'}/`,\n      hasTime = savefilepath.state.hasTime,\n      format = savefilepath.state.format,\n      fileName = `${savefilepath.state.filename || Date.now().toString()}${!hasTime ? '' : (Date.now().toString())}.webm`;\n\n    await FileService.save(buffer, folder, fileName);\n    if(format !== 'webm'){\n      this.setState({isLoading: true});\n      ipcRenderer.send('win:convert-video', {folder, fileName, type: format});\n    }\n    console.log('save')\n  }\n\n  deleteRecording = async () => {\n    const {isRecording} = this.state;\n    if(isRecording){\n      await RecorderService.stop();\n      this.setState({isRecording: false, isPaused: false});\n      this.timeCounter.current.stop();\n      this.timeCounter.current.reset();\n      ipcRenderer.send('win:cancel');\n    }\n  }\n\n  cancelRecording = async () => {\n    this.pause();\n    const options = {\n      type: 'question',\n      buttons: ['No', 'Yes'],\n      defaultId: 2,\n      title: 'Question',\n      message: 'Do you want to delete the current recording?',\n      detail: 'it cannot be undone',\n    };\n    remote.dialog.showMessageBox(null, options, (response) => {\n      if(response === 1){ // Yes\n        this.deleteRecording();\n      }\n    })\n  }\n\n  controlButtons(){\n    const { isRecording, isPaused } = this.state;\n\n    if(isRecording && !isPaused){\n      return (\n        <>\n          <button className=\"record-control-button\" onClick={this.cancelRecording} ><i className=\"fas fa-trash-alt\" /><span>Delete</span></button>\n          <button className=\"record-control-button\" onClick={this.pause} ><i className=\"fas fa-pause\" /><span>Pause</span></button>\n          <button className=\"record-control-button\" onClick={this.stop} ><i className=\"fas fa-stop\" /><span>Stop</span></button>\n        </>\n      )\n    }else{\n      return (\n        <>\n          <button className=\"record-control-button\" onClick={this.cancelRecording} ><i className=\"fas fa-trash-alt\" /><span>Delete</span></button>\n          <button className=\"record-control-button\" onClick={this.resume} ><i className=\"fas fa-play\" /><span>Resume</span></button>\n          <button className=\"record-control-button\" onClick={this.stop} ><i className=\"fas fa-stop\" /><span>Stop</span></button>\n        </>\n      )\n    }\n  }\n\n\n  render() {\n    const { isRecording, canRecordSystemAudio, audioTarget, isLoading } = this.state;\n    let appClassName = 'App';\n    if(isRecording){\n      appClassName += ' is-recording';\n    }\n    return (\n      <div className={appClassName}>\n        <div className=\"app-container\" >\n          <video className=\"video-preview\" ref={this.video} />\n          <div className=\"audio-visualization-container\" >\n            <AudioVisualization height={50} width={100} audioDevice={audioTarget}  />\n          </div>\n\n          <div className=\"settings-control\">\n            <div className=\"settings-sources\" >\n              <VideoSourceList ref={this.videoSourceList} onSelect={this.onVideoSourceSelect} />\n              <AudioSourceList ref={this.audioSourceList} onSelect={this.onAudioSourceSelect} />\n              <label style={{'display': 'none'}} >\n                <input disabled type=\"checkbox\" checked={canRecordSystemAudio} onChange={this.onRecordSystemAudioChange} /> Record System Audio\n              </label>\n            </div>\n            <div className=\"record-control\" > \n              <button className=\"record-control-button\" onClick={this.start} ><i className=\"fas fa-circle\" /><span>Record</span></button>\n            </div>\n          </div>\n\n          <div className=\"recording-control\" >\n            <div className=\"time-counter-container\" >\n              <TimeCounter ref={this.timeCounter} isActive />\n            </div>\n            <div className=\"record-control\" >\n              {this.controlButtons()}\n            </div>\n          </div>\n\n          <div className=\"save-file-container\" >\n              <SaveFilepath ref={this.savefilepath} />\n          </div>\n\n        </div>\n\n        <div className={'loading-container' + (isLoading ? ' is-loading' : '')}>\n          <span>Wait . . .</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nexport const RecorderService = {\n    recorder: null,\n    blobs: [],\n    start(stream){\n        if(!RecorderService.recorder){\n            RecorderService.recorder = new MediaRecorder(stream);\n            RecorderService.blobs = [];\n\n            RecorderService.recorder.ondataavailable = function(event){\n                RecorderService.blobs.push(event.data);\n            }\n\n            RecorderService.recorder.start();\n        }\n    },\n    async stop(){\n        return new Promise((resolve) =>  {\n            if(RecorderService.recorder && RecorderService.recorder.state !== null){\n                RecorderService.recorder.onstop = function(){\n                    RecorderService.toArrayBuffer(new Blob(RecorderService.blobs, {type: 'video/webm'}), function(arrayBuffer){\n                        const buffer = RecorderService.toBuffer(arrayBuffer);\n                        resolve(buffer);\n                    })\n                    RecorderService.recorder = null;\n                }\n                RecorderService.recorder.stop();\n            }\n        })\n    },\n    pause(){\n        if(RecorderService.recorder && RecorderService.recorder.state === 'recording'){\n            RecorderService.recorder.pause();\n        }\n    },\n    resume(){\n        if(RecorderService.recorder && RecorderService.recorder.state === 'paused'){\n            RecorderService.recorder.resume();\n        }\n    },\n    toArrayBuffer(blob, callback){\n\t\tlet fileReader = new FileReader();\n\t\tfileReader.onload = function(){\n\t\t\tlet arrayBuffer = this.result;\n\t\t\tcallback(arrayBuffer);\n\t\t}\n\t\tfileReader.readAsArrayBuffer(blob);\n\t},\n\ttoBuffer(arrayBuffer){\n\t\tlet buffer = new Buffer(arrayBuffer.byteLength);\n\t\tlet arr = new Uint8Array(arrayBuffer)\n\t\tfor(let i = 0; i < arr.byteLength; i++){\n\t\t\tbuffer[i] = arr[i];\n\t\t}\n\t\treturn buffer;\n\t}\n};"],"sourceRoot":""}